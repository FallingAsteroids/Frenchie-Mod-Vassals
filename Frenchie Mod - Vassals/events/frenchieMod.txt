namespace = frenchie_mod

country_event = { #event for getting money as an estate from other provinces
  id = frenchie_mod.1
  title = "frenchie_mod_1.t"
  desc = "frenchie_mod_1.d"
  is_triggered_only = yes
  picture = "DIPLOMACY_eventPicture"
  hidden = yes

  trigger = {
    AND = {
      is_subject_of_type = estate
      has_country_flag = estate
    }
  }
  immediate = {
    ROOT = {
      multiply_variable = {
        which = frenchie_estate_added_tax_income
        value = 0
      }
      overlord = {
        every_subject_country = {
          limit = {
            NOT = {
              is_subject_of_type = protectorate
            }
          }
          every_owned_province = {
            if = {
              limit = {
                AND = {
                  OR = {
                    culture = ROOT
                    is_core = ROOT
                    any_province_in_state = {
                      is_capital_of = ROOT
                    }
                    previous_owner = ROOT
                  }
                  NOT = {
                    controlled_by = ROOT
                  }
                }
              }
              log = "===== OVERLORD SUBJECT PROVINCES ROOT IS [Root.GetName]"
              log = "===== Found provice, it is [This.GetName]"
              export_to_variable = {
                which = additionnal_income
                value = base_tax
              }
              log = "===== Its base tax is [This.additionnal_income.GetValue]"
              set_variable = {
                which = anti_autonomy
                value = 100
              }
              export_to_variable = {
                which = fprovince_local_autonomy
                value = local_autonomy
              }
              log = "===== Its autonomy is [This.fprovince_local_autonomy.GetValue]"
              subtract_variable = {
                which = anti_autonomy
                which = fprovince_local_autonomy
              }
              multiply_variable = {
                which = additionnal_income
                which = anti_autonomy
              }
              divide_variable = {
                which = additionnal_income
                value = 100
              }
              log = "===== The Adjusted income from the province is [This.additionnal_income.GetValue]"
              ROOT = {
                set_variable = {
                  which = additionnal_income
                  which = PREV
                }
                log = "===== The Adjusted income extracted to root is [Root.additionnal_income.GetValue]"
                change_variable = {
                  which = frenchie_estate_added_tax_income
                  which = additionnal_income
                }
                log = "===== frenchie_estate_added_tax_income is now [Root.frenchie_estate_added_tax_income.GetValue]"
              }
            }
          }
        }
        every_owned_province = {
          if = {
            limit = {
              AND = {
                OR = {
                  culture = ROOT
                  is_core = ROOT
                  any_province_in_state = {
                    is_capital_of = ROOT
                  }
                  previous_owner = ROOT
                }
                NOT = {
                  controlled_by = ROOT
                }
              }
            }
            log = "===== OVERLORD PROVINCES ROOT IS [Root.GetName]"
            log = "===== Found provice, it is [This.GetName]"
            export_to_variable = {
              which = additionnal_income
              value = base_tax
            }
            log = "===== Its base tax is [This.additionnal_income.GetValue]"
            set_variable = {
              which = anti_autonomy
              value = 100
            }
            export_to_variable = {
              which = fprovince_local_autonomy
              value = local_autonomy
            }
            log = "===== Its autonomy is [This.fprovince_local_autonomy.GetValue]"
            subtract_variable = {
              which = anti_autonomy
              which = fprovince_local_autonomy
            }
            multiply_variable = {
              which = additionnal_income
              which = anti_autonomy
            }
            divide_variable = {
              which = additionnal_income
              value = 100
            }
            log = "===== The Adjusted income from the province is [This.additionnal_income.GetValue]"
            ROOT = {
              set_variable = {
                which = additionnal_income
                which = PREV
              }
              log = "===== The Adjusted income extracted to root is [Root.additionnal_income.GetValue]"
              change_variable = {
                which = frenchie_estate_added_tax_income
                which = additionnal_income
              }
              log = "===== frenchie_estate_added_tax_income is now [Root.frenchie_estate_added_tax_income.GetValue]"
            }
          }
        }
      }
      set_variable = {
        which = frenchie_used_estate_added_tax_income
        value = 0
      }
      log = "===== frenchie_estate_added_tax_income: [Root.frenchie_estate_added_tax_income.GetValue]"
      log = "===== frenchie_used_estate_added_tax_income: [Root.frenchie_used_estate_added_tax_income.GetValue]"
      multiply_variable = {
        which = frenchie_estate_added_tax_income
        value = 2
      }
      while = {
        limit = {
          check_variable = {
            which = frenchie_estate_added_tax_income
            which = frenchie_used_estate_added_tax_income
          }
        }
        change_variable = {
          which = frenchie_used_estate_added_tax_income
          value = 1
        }
        add_treasury = 1
        log = "===== frenchie_estate_added_tax_income: [Root.frenchie_estate_added_tax_income.GetValue]"
        log = "===== frenchie_used_estate_added_tax_income: [Root.frenchie_used_estate_added_tax_income.GetValue]"
      }
    }
  }

  option = {
    name = "frenchie_mod_1.a"
  }
}
